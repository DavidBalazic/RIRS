name: Backend CI

on:
  push:
    branches:
      - develop
      - production
  pull_request:
    branches:
      - develop
      - production

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
         python-version: 3.12

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('EvidencaLetenjaBackend/requirements.txt') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-pip-
      # ⚠️ Caching:
      # - Če cache obstaja (cache hit), se node_modules obnovi, preden se zažene npm install.
      # - Če cache ne obstaja (cache miss), npm install ponovno ustvari mapo node_modules.

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r EvidencaLetenjaBackend/requirements.txt

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build  # Ime artefakta
        path: |
          EvidencaLetenjaBackend/

  test-backend:
    needs: build-backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('EvidencaLetenjaBackend/requirements.txt') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r EvidencaLetenjaBackend/requirements.txt
      # ⚠️ Cache hit:
      # - Če je cache hit, npm install preveri obstoječe odvisnosti in ne namešča ničesar dodatnega.
      # - Če je cache miss, npm install ponovno ustvari mapo node_modules.

    - name: Run tests with coverage 
      run: |
        cd EvidencaLetenjaBackend
        pytest --cov=. --cov-report=html:coverage tests

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage 
        path:  EvidencaLetenjaBackend/coverage/

  dockerize-and-push-dev:
    needs: test-backend
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:dev EvidencaLetenjaBackend
          docker tag ${{ secrets.DOCKER_USERNAME }}/backend:dev ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

  sonarcloud-analysis:
    needs: test-backend
    runs-on: ubuntu-latest
    environment:
      name: Development 

    if: github.ref == 'refs/heads/develop' 

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Setup Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r EvidencaLetenjaBackend/requirements.txt

    - name: Collect coverage
      run: |
        cd EvidencaLetenjaBackend
        pytest --cov=. --cov-report=xml:coverage.xml tests
      env:
        CI: true

    - name: Upload coverage report
      run: |
        cp EvidencaLetenjaBackend/coverage.xml .

    - name: Run SonarCloud analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        npx sonar-scanner \
          -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
          -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }} \
          -Dsonar.sources=./EvidencaLetenjaBackend \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.python.coverage.reportPaths=coverage.xml
  
  dockerize-and-push-prod:
    needs: test-backend
    runs-on: ubuntu-latest
    environment: 
      name: Production

    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check SonarCloud Quality Gate
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/project_badges/measure?project=${{ secrets.PROJECT_KEY }}&metric=alert_status" | grep -q "OK" || exit 1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:prod EvidencaLetenjaBackend
          docker tag ${{ secrets.DOCKER_USERNAME }}/backend:prod ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

  deploy-to-render:
    needs: [test-backend, dockerize-and-push-prod]
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true