name: Frontend CI

on:
  push:
    branches:
      - develop
      - production
  pull_request:
    branches:
      - develop
      - production

jobs:
  build-frontend:
    runs-on: ubuntu-latest 

    steps:
    - name: Checkout code 
      uses: actions/checkout@v3

    - name: Setup Node.js 
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules 
      uses: actions/cache@v3
      with:
        path: frontend/evidencaLetenja/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/evidencaLetenja/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-
      # ⚠️ KAKO DELUJE CACHING:
      # - Ob prvi izvedbi (cache miss) mapa node_modules še ne obstaja -> npm install ustvari mapo node_modules.
      # - Po zaključku job-a se vsebina node_modules shrani v cache.
      # - Ob naslednji izvedbi (cache hit) se node_modules obnovi iz cache-a, kar skrajša čas nameščanja odvisnosti.

    - name: Install dependencies
      run: |
        cd frontend/evidencaLetenja
        npm ci

    - name: Build application
      run: |
        cd frontend/evidencaLetenja
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/evidencaLetenja/build

  test-frontend:
    needs: build-frontend 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules 
      uses: actions/cache@v3
      with:
        path: frontend/evidencaLetenja/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/evidencaLetenja/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install dependencies
      run: |
        cd frontend/evidencaLetenja
        npm install
      # ⚠️ KAKO PREPOZNATI, DA JE CACHE USPEŠEN?
      # - Če je cache hit, npm install ne namešča novih odvisnosti, ampak preveri obstoječe.
      # - Če je cache miss, npm install ponovno ustvari mapo node_modules.

    - name: Run tests with coverage
      run: |
        cd frontend/evidencaLetenja
        npm run test:ci

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/evidencaLetenja/coverage/

  dockerize-and-push-dev:
    needs: test-frontend
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:dev frontend/evidencaLetenja
          docker tag ${{ secrets.DOCKER_USERNAME }}/frontend:dev ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

  sonarcloud-analysis:
    needs: test-frontend  
    runs-on: ubuntu-latest
    environment:
      name: Development 

    if: github.ref == 'refs/heads/develop' 

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
        
    - name: Setup Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Install dependencies
      run: |
        cd frontend/evidencaLetenja
        npm ci

    - name: Collect coverage
      run: |
        cd frontend/evidencaLetenja
        npm run test:ci
      env:
        CI: true

    - name: Upload coverage report
      run: |
        cp frontend/evidencaLetenja/coverage/lcov.info .

    - name: Run SonarCloud analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        npx sonar-scanner \
          -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
          -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }} \
          -Dsonar.sources=./frontend/evidencaLetenja \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  dockerize-and-push-prod:
    needs: test-frontend
    runs-on: ubuntu-latest
    environment: 
      name: Production

    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:prod frontend/evidencaLetenja
          docker tag ${{ secrets.DOCKER_USERNAME }}/frontend:prod ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

  deploy-to-render:
    needs: [test-frontend, dockerize-and-push-prod]
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
  
  deploy-pages:
    needs: test-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
